// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace taskscheduler {
PROTOBUF_CONSTEXPR Task_MetadataEntry_DoNotUse::Task_MetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Task_MetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Task_MetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Task_MetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Task_MetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Task_MetadataEntry_DoNotUseDefaultTypeInternal _Task_MetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Task::Task(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;
PROTOBUF_CONSTEXPR TaskResult::TaskResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/int64_t{0}
  , /*decltype(_impl_.end_time_)*/int64_t{0}
  , /*decltype(_impl_.duration_ms_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskResultDefaultTypeInternal() {}
  union {
    TaskResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskResultDefaultTypeInternal _TaskResult_default_instance_;
PROTOBUF_CONSTEXPR WorkerHeartbeat_DecEntry_DoNotUse::WorkerHeartbeat_DecEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct WorkerHeartbeat_DecEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerHeartbeat_DecEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerHeartbeat_DecEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WorkerHeartbeat_DecEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerHeartbeat_DecEntry_DoNotUseDefaultTypeInternal _WorkerHeartbeat_DecEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR WorkerHeartbeat::WorkerHeartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dec_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.worker_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worker_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.worker_port_)*/0
  , /*decltype(_impl_.is_healthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerHeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerHeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerHeartbeatDefaultTypeInternal() {}
  union {
    WorkerHeartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerHeartbeatDefaultTypeInternal _WorkerHeartbeat_default_instance_;
PROTOBUF_CONSTEXPR SchedulerHeartbeat_DecEntry_DoNotUse::SchedulerHeartbeat_DecEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SchedulerHeartbeat_DecEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchedulerHeartbeat_DecEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchedulerHeartbeat_DecEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SchedulerHeartbeat_DecEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchedulerHeartbeat_DecEntry_DoNotUseDefaultTypeInternal _SchedulerHeartbeat_DecEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SchedulerHeartbeat::SchedulerHeartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dec_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.scheduler_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scheduler_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scheduler_port_)*/0
  , /*decltype(_impl_.timetamp_)*/0
  , /*decltype(_impl_.is_healthy_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SchedulerHeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SchedulerHeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SchedulerHeartbeatDefaultTypeInternal() {}
  union {
    SchedulerHeartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SchedulerHeartbeatDefaultTypeInternal _SchedulerHeartbeat_default_instance_;
}  // namespace taskscheduler
static ::_pb::Metadata file_level_metadata_task_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_task_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_task_2eproto = nullptr;

const uint32_t TableStruct_task_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task_MetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task_MetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task_MetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task_MetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task, _impl_.worker_id_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::Task, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _impl_.task_id_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _impl_.duration_ms_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::TaskResult, _impl_.worker_id_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat_DecEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat_DecEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat_DecEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat_DecEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat, _impl_.worker_id_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat, _impl_.worker_ip_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat, _impl_.worker_port_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat, _impl_.is_healthy_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::WorkerHeartbeat, _impl_.dec_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat_DecEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat_DecEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat_DecEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat_DecEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat, _impl_.scheduler_id_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat, _impl_.scheduler_ip_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat, _impl_.scheduler_port_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat, _impl_.timetamp_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat, _impl_.is_healthy_),
  PROTOBUF_FIELD_OFFSET(::taskscheduler::SchedulerHeartbeat, _impl_.dec_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::taskscheduler::Task_MetadataEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::taskscheduler::Task)},
  { 22, -1, -1, sizeof(::taskscheduler::TaskResult)},
  { 36, 44, -1, sizeof(::taskscheduler::WorkerHeartbeat_DecEntry_DoNotUse)},
  { 46, -1, -1, sizeof(::taskscheduler::WorkerHeartbeat)},
  { 58, 66, -1, sizeof(::taskscheduler::SchedulerHeartbeat_DecEntry_DoNotUse)},
  { 68, -1, -1, sizeof(::taskscheduler::SchedulerHeartbeat)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::taskscheduler::_Task_MetadataEntry_DoNotUse_default_instance_._instance,
  &::taskscheduler::_Task_default_instance_._instance,
  &::taskscheduler::_TaskResult_default_instance_._instance,
  &::taskscheduler::_WorkerHeartbeat_DecEntry_DoNotUse_default_instance_._instance,
  &::taskscheduler::_WorkerHeartbeat_default_instance_._instance,
  &::taskscheduler::_SchedulerHeartbeat_DecEntry_DoNotUse_default_instance_._instance,
  &::taskscheduler::_SchedulerHeartbeat_default_instance_._instance,
};

const char descriptor_table_protodef_task_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ntask.proto\022\rtaskscheduler\"\363\001\n\004Task\022\017\n\007"
  "task_id\030\001 \001(\t\022%\n\004type\030\002 \001(\0162\027.taskschedu"
  "ler.TaskType\022\017\n\007content\030\003 \001(\t\022\021\n\tworker_"
  "id\030\004 \001(\t\022)\n\006status\030\005 \001(\0162\031.taskscheduler"
  ".TaskStatus\0223\n\010metadata\030\006 \003(\0132!.tasksche"
  "duler.Task.MetadataEntry\032/\n\rMetadataEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\275\001\n\nTa"
  "skResult\022\017\n\007task_id\030\001 \001(\t\022)\n\006status\030\002 \001("
  "\0162\031.taskscheduler.TaskStatus\022\016\n\006output\030\003"
  " \001(\t\022\025\n\rerror_message\030\004 \001(\t\022\022\n\nstart_tim"
  "e\030\005 \001(\003\022\020\n\010end_time\030\006 \001(\003\022\023\n\013duration_ms"
  "\030\007 \001(\003\022\021\n\tworker_id\030\010 \001(\t\"\325\001\n\017WorkerHear"
  "tbeat\022\021\n\tworker_id\030\001 \001(\t\022\021\n\tworker_ip\030\002 "
  "\001(\t\022\023\n\013worker_port\030\003 \001(\005\022\021\n\ttimestamp\030\004 "
  "\001(\003\022\022\n\nis_healthy\030\005 \001(\010\0224\n\003dec\030\006 \003(\0132\'.t"
  "askscheduler.WorkerHeartbeat.DecEntry\032*\n"
  "\010DecEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"\343\001\n\022SchedulerHeartbeat\022\024\n\014scheduler_id"
  "\030\001 \001(\t\022\024\n\014scheduler_ip\030\002 \001(\t\022\026\n\016schedule"
  "r_port\030\003 \001(\005\022\020\n\010timetamp\030\004 \001(\005\022\022\n\nis_hea"
  "lthy\030\005 \001(\010\0227\n\003dec\030\006 \003(\0132*.taskscheduler."
  "SchedulerHeartbeat.DecEntry\032*\n\010DecEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\?\n\nTaskS"
  "tatus\022\013\n\007PENDING\020\000\022\013\n\007RUNNING\020\001\022\013\n\007SUCCE"
  "SS\020\002\022\n\n\006FAILED\020\003*%\n\010TaskType\022\014\n\010FUNCTION"
  "\020\000\022\013\n\007COMMAND\020\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_task_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_task_2eproto = {
    false, false, 1023, descriptor_table_protodef_task_2eproto,
    "task.proto",
    &descriptor_table_task_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_task_2eproto::offsets,
    file_level_metadata_task_2eproto, file_level_enum_descriptors_task_2eproto,
    file_level_service_descriptors_task_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_task_2eproto_getter() {
  return &descriptor_table_task_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_task_2eproto(&descriptor_table_task_2eproto);
namespace taskscheduler {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[0];
}
bool TaskStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_task_2eproto);
  return file_level_enum_descriptors_task_2eproto[1];
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

Task_MetadataEntry_DoNotUse::Task_MetadataEntry_DoNotUse() {}
Task_MetadataEntry_DoNotUse::Task_MetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Task_MetadataEntry_DoNotUse::MergeFrom(const Task_MetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Task_MetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[0]);
}

// ===================================================================

class Task::_Internal {
 public:
};

Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Task::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:taskscheduler.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Task* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.worker_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_id().empty()) {
    _this->_impl_.worker_id_.Set(from._internal_worker_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:taskscheduler.Task)
}

inline void Task::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.task_id_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.worker_id_){}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:taskscheduler.Task)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.metadata_.Destruct();
  _impl_.metadata_.~MapField();
  _impl_.task_id_.Destroy();
  _impl_.content_.Destroy();
  _impl_.worker_id_.Destroy();
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  _this->_impl_.metadata_.Destruct();
}
void Task::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:taskscheduler.Task)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_.Clear();
  _impl_.task_id_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.worker_id_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.Task.task_id"));
        } else
          goto handle_unusual;
        continue;
      // .taskscheduler.TaskType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::taskscheduler::TaskType>(val));
        } else
          goto handle_unusual;
        continue;
      // string content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.Task.content"));
        } else
          goto handle_unusual;
        continue;
      // string worker_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.Task.worker_id"));
        } else
          goto handle_unusual;
        continue;
      // .taskscheduler.TaskStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::taskscheduler::TaskStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Task::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taskscheduler.Task)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.Task.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // .taskscheduler.TaskType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.Task.content");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_content(), target);
  }

  // string worker_id = 4;
  if (!this->_internal_worker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.Task.worker_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_worker_id(), target);
  }

  // .taskscheduler.TaskStatus status = 5;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // map<string, string> metadata = 6;
  if (!this->_internal_metadata().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = Task_MetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_metadata();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "taskscheduler.Task.MetadataEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "taskscheduler.Task.MetadataEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskscheduler.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskscheduler.Task)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> metadata = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_metadata().begin();
      it != this->_internal_metadata().end(); ++it) {
    total_size += Task_MetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string content = 3;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // string worker_id = 4;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  // .taskscheduler.TaskType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .taskscheduler.TaskStatus status = 5;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Task::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Task::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Task::GetClassData() const { return &_class_data_; }


void Task::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taskscheduler.Task)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.metadata_.MergeFrom(from._impl_.metadata_);
  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (!from._internal_worker_id().empty()) {
    _this->_internal_set_worker_id(from._internal_worker_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskscheduler.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.metadata_.InternalSwap(&other->_impl_.metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_id_, lhs_arena,
      &other->_impl_.worker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.status_)
      + sizeof(Task::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[1]);
}

// ===================================================================

class TaskResult::_Internal {
 public:
};

TaskResult::TaskResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:taskscheduler.TaskResult)
}
TaskResult::TaskResult(const TaskResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.worker_id_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.duration_ms_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_task_id().empty()) {
    _this->_impl_.task_id_.Set(from._internal_task_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_id().empty()) {
    _this->_impl_.worker_id_.Set(from._internal_worker_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:taskscheduler.TaskResult)
}

inline void TaskResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_id_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.error_message_){}
    , decltype(_impl_.worker_id_){}
    , decltype(_impl_.start_time_){int64_t{0}}
    , decltype(_impl_.end_time_){int64_t{0}}
    , decltype(_impl_.duration_ms_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.task_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.task_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaskResult::~TaskResult() {
  // @@protoc_insertion_point(destructor:taskscheduler.TaskResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_id_.Destroy();
  _impl_.output_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.worker_id_.Destroy();
}

void TaskResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskResult::Clear() {
// @@protoc_insertion_point(message_clear_start:taskscheduler.TaskResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_id_.ClearToEmpty();
  _impl_.output_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  _impl_.worker_id_.ClearToEmpty();
  ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.TaskResult.task_id"));
        } else
          goto handle_unusual;
        continue;
      // .taskscheduler.TaskStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::taskscheduler::TaskStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string output = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.TaskResult.output"));
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.TaskResult.error_message"));
        } else
          goto handle_unusual;
        continue;
      // int64 start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string worker_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.TaskResult.worker_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taskscheduler.TaskResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.TaskResult.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  // .taskscheduler.TaskStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string output = 3;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.TaskResult.output");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_output(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.TaskResult.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  // int64 start_time = 5;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_start_time(), target);
  }

  // int64 end_time = 6;
  if (this->_internal_end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_end_time(), target);
  }

  // int64 duration_ms = 7;
  if (this->_internal_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_duration_ms(), target);
  }

  // string worker_id = 8;
  if (!this->_internal_worker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.TaskResult.worker_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_worker_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskscheduler.TaskResult)
  return target;
}

size_t TaskResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskscheduler.TaskResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  // string output = 3;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // string worker_id = 8;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  // int64 start_time = 5;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time());
  }

  // int64 end_time = 6;
  if (this->_internal_end_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_time());
  }

  // int64 duration_ms = 7;
  if (this->_internal_duration_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_ms());
  }

  // .taskscheduler.TaskStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskResult::GetClassData() const { return &_class_data_; }


void TaskResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskResult*>(&to_msg);
  auto& from = static_cast<const TaskResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taskscheduler.TaskResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (!from._internal_worker_id().empty()) {
    _this->_internal_set_worker_id(from._internal_worker_id());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (from._internal_end_time() != 0) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (from._internal_duration_ms() != 0) {
    _this->_internal_set_duration_ms(from._internal_duration_ms());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskResult::CopyFrom(const TaskResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskscheduler.TaskResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResult::IsInitialized() const {
  return true;
}

void TaskResult::InternalSwap(TaskResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.task_id_, lhs_arena,
      &other->_impl_.task_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_id_, lhs_arena,
      &other->_impl_.worker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskResult, _impl_.status_)
      + sizeof(TaskResult::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TaskResult, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[2]);
}

// ===================================================================

WorkerHeartbeat_DecEntry_DoNotUse::WorkerHeartbeat_DecEntry_DoNotUse() {}
WorkerHeartbeat_DecEntry_DoNotUse::WorkerHeartbeat_DecEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WorkerHeartbeat_DecEntry_DoNotUse::MergeFrom(const WorkerHeartbeat_DecEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WorkerHeartbeat_DecEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[3]);
}

// ===================================================================

class WorkerHeartbeat::_Internal {
 public:
};

WorkerHeartbeat::WorkerHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &WorkerHeartbeat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:taskscheduler.WorkerHeartbeat)
}
WorkerHeartbeat::WorkerHeartbeat(const WorkerHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerHeartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.dec_)*/{}
    , decltype(_impl_.worker_id_){}
    , decltype(_impl_.worker_ip_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.worker_port_){}
    , decltype(_impl_.is_healthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dec_.MergeFrom(from._impl_.dec_);
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_id().empty()) {
    _this->_impl_.worker_id_.Set(from._internal_worker_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worker_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_ip().empty()) {
    _this->_impl_.worker_ip_.Set(from._internal_worker_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_healthy_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_healthy_));
  // @@protoc_insertion_point(copy_constructor:taskscheduler.WorkerHeartbeat)
}

inline void WorkerHeartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.dec_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.worker_id_){}
    , decltype(_impl_.worker_ip_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.worker_port_){0}
    , decltype(_impl_.is_healthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.worker_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worker_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkerHeartbeat::~WorkerHeartbeat() {
  // @@protoc_insertion_point(destructor:taskscheduler.WorkerHeartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void WorkerHeartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dec_.Destruct();
  _impl_.dec_.~MapField();
  _impl_.worker_id_.Destroy();
  _impl_.worker_ip_.Destroy();
}

void WorkerHeartbeat::ArenaDtor(void* object) {
  WorkerHeartbeat* _this = reinterpret_cast< WorkerHeartbeat* >(object);
  _this->_impl_.dec_.Destruct();
}
void WorkerHeartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:taskscheduler.WorkerHeartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dec_.Clear();
  _impl_.worker_id_.ClearToEmpty();
  _impl_.worker_ip_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_healthy_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_healthy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerHeartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string worker_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_worker_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.WorkerHeartbeat.worker_id"));
        } else
          goto handle_unusual;
        continue;
      // string worker_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_worker_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.WorkerHeartbeat.worker_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 worker_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.worker_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_healthy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_healthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> dec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.dec_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerHeartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taskscheduler.WorkerHeartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string worker_id = 1;
  if (!this->_internal_worker_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_id().data(), static_cast<int>(this->_internal_worker_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.WorkerHeartbeat.worker_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_worker_id(), target);
  }

  // string worker_ip = 2;
  if (!this->_internal_worker_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_ip().data(), static_cast<int>(this->_internal_worker_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.WorkerHeartbeat.worker_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_worker_ip(), target);
  }

  // int32 worker_port = 3;
  if (this->_internal_worker_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_worker_port(), target);
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // bool is_healthy = 5;
  if (this->_internal_is_healthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_healthy(), target);
  }

  // map<string, string> dec = 6;
  if (!this->_internal_dec().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = WorkerHeartbeat_DecEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_dec();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "taskscheduler.WorkerHeartbeat.DecEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "taskscheduler.WorkerHeartbeat.DecEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskscheduler.WorkerHeartbeat)
  return target;
}

size_t WorkerHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskscheduler.WorkerHeartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> dec = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dec_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_dec().begin();
      it != this->_internal_dec().end(); ++it) {
    total_size += WorkerHeartbeat_DecEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string worker_id = 1;
  if (!this->_internal_worker_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_id());
  }

  // string worker_ip = 2;
  if (!this->_internal_worker_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_ip());
  }

  // int64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 worker_port = 3;
  if (this->_internal_worker_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_worker_port());
  }

  // bool is_healthy = 5;
  if (this->_internal_is_healthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerHeartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerHeartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerHeartbeat::GetClassData() const { return &_class_data_; }


void WorkerHeartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerHeartbeat*>(&to_msg);
  auto& from = static_cast<const WorkerHeartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taskscheduler.WorkerHeartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dec_.MergeFrom(from._impl_.dec_);
  if (!from._internal_worker_id().empty()) {
    _this->_internal_set_worker_id(from._internal_worker_id());
  }
  if (!from._internal_worker_ip().empty()) {
    _this->_internal_set_worker_ip(from._internal_worker_ip());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_worker_port() != 0) {
    _this->_internal_set_worker_port(from._internal_worker_port());
  }
  if (from._internal_is_healthy() != 0) {
    _this->_internal_set_is_healthy(from._internal_is_healthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerHeartbeat::CopyFrom(const WorkerHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskscheduler.WorkerHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerHeartbeat::IsInitialized() const {
  return true;
}

void WorkerHeartbeat::InternalSwap(WorkerHeartbeat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dec_.InternalSwap(&other->_impl_.dec_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_id_, lhs_arena,
      &other->_impl_.worker_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_ip_, lhs_arena,
      &other->_impl_.worker_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerHeartbeat, _impl_.is_healthy_)
      + sizeof(WorkerHeartbeat::_impl_.is_healthy_)
      - PROTOBUF_FIELD_OFFSET(WorkerHeartbeat, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerHeartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[4]);
}

// ===================================================================

SchedulerHeartbeat_DecEntry_DoNotUse::SchedulerHeartbeat_DecEntry_DoNotUse() {}
SchedulerHeartbeat_DecEntry_DoNotUse::SchedulerHeartbeat_DecEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SchedulerHeartbeat_DecEntry_DoNotUse::MergeFrom(const SchedulerHeartbeat_DecEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SchedulerHeartbeat_DecEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[5]);
}

// ===================================================================

class SchedulerHeartbeat::_Internal {
 public:
};

SchedulerHeartbeat::SchedulerHeartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SchedulerHeartbeat::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:taskscheduler.SchedulerHeartbeat)
}
SchedulerHeartbeat::SchedulerHeartbeat(const SchedulerHeartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SchedulerHeartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.dec_)*/{}
    , decltype(_impl_.scheduler_id_){}
    , decltype(_impl_.scheduler_ip_){}
    , decltype(_impl_.scheduler_port_){}
    , decltype(_impl_.timetamp_){}
    , decltype(_impl_.is_healthy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.dec_.MergeFrom(from._impl_.dec_);
  _impl_.scheduler_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scheduler_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scheduler_id().empty()) {
    _this->_impl_.scheduler_id_.Set(from._internal_scheduler_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scheduler_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scheduler_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scheduler_ip().empty()) {
    _this->_impl_.scheduler_ip_.Set(from._internal_scheduler_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.scheduler_port_, &from._impl_.scheduler_port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_healthy_) -
    reinterpret_cast<char*>(&_impl_.scheduler_port_)) + sizeof(_impl_.is_healthy_));
  // @@protoc_insertion_point(copy_constructor:taskscheduler.SchedulerHeartbeat)
}

inline void SchedulerHeartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.dec_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.scheduler_id_){}
    , decltype(_impl_.scheduler_ip_){}
    , decltype(_impl_.scheduler_port_){0}
    , decltype(_impl_.timetamp_){0}
    , decltype(_impl_.is_healthy_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.scheduler_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scheduler_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scheduler_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scheduler_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SchedulerHeartbeat::~SchedulerHeartbeat() {
  // @@protoc_insertion_point(destructor:taskscheduler.SchedulerHeartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SchedulerHeartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dec_.Destruct();
  _impl_.dec_.~MapField();
  _impl_.scheduler_id_.Destroy();
  _impl_.scheduler_ip_.Destroy();
}

void SchedulerHeartbeat::ArenaDtor(void* object) {
  SchedulerHeartbeat* _this = reinterpret_cast< SchedulerHeartbeat* >(object);
  _this->_impl_.dec_.Destruct();
}
void SchedulerHeartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SchedulerHeartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:taskscheduler.SchedulerHeartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dec_.Clear();
  _impl_.scheduler_id_.ClearToEmpty();
  _impl_.scheduler_ip_.ClearToEmpty();
  ::memset(&_impl_.scheduler_port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_healthy_) -
      reinterpret_cast<char*>(&_impl_.scheduler_port_)) + sizeof(_impl_.is_healthy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SchedulerHeartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string scheduler_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_scheduler_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.SchedulerHeartbeat.scheduler_id"));
        } else
          goto handle_unusual;
        continue;
      // string scheduler_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_scheduler_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "taskscheduler.SchedulerHeartbeat.scheduler_ip"));
        } else
          goto handle_unusual;
        continue;
      // int32 scheduler_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.scheduler_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timetamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timetamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_healthy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_healthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> dec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.dec_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SchedulerHeartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:taskscheduler.SchedulerHeartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string scheduler_id = 1;
  if (!this->_internal_scheduler_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scheduler_id().data(), static_cast<int>(this->_internal_scheduler_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.SchedulerHeartbeat.scheduler_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scheduler_id(), target);
  }

  // string scheduler_ip = 2;
  if (!this->_internal_scheduler_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scheduler_ip().data(), static_cast<int>(this->_internal_scheduler_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "taskscheduler.SchedulerHeartbeat.scheduler_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_scheduler_ip(), target);
  }

  // int32 scheduler_port = 3;
  if (this->_internal_scheduler_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_scheduler_port(), target);
  }

  // int32 timetamp = 4;
  if (this->_internal_timetamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_timetamp(), target);
  }

  // bool is_healthy = 5;
  if (this->_internal_is_healthy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_healthy(), target);
  }

  // map<string, string> dec = 6;
  if (!this->_internal_dec().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SchedulerHeartbeat_DecEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_dec();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "taskscheduler.SchedulerHeartbeat.DecEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "taskscheduler.SchedulerHeartbeat.DecEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:taskscheduler.SchedulerHeartbeat)
  return target;
}

size_t SchedulerHeartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:taskscheduler.SchedulerHeartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> dec = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dec_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_dec().begin();
      it != this->_internal_dec().end(); ++it) {
    total_size += SchedulerHeartbeat_DecEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string scheduler_id = 1;
  if (!this->_internal_scheduler_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheduler_id());
  }

  // string scheduler_ip = 2;
  if (!this->_internal_scheduler_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheduler_ip());
  }

  // int32 scheduler_port = 3;
  if (this->_internal_scheduler_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scheduler_port());
  }

  // int32 timetamp = 4;
  if (this->_internal_timetamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timetamp());
  }

  // bool is_healthy = 5;
  if (this->_internal_is_healthy() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SchedulerHeartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SchedulerHeartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SchedulerHeartbeat::GetClassData() const { return &_class_data_; }


void SchedulerHeartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SchedulerHeartbeat*>(&to_msg);
  auto& from = static_cast<const SchedulerHeartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:taskscheduler.SchedulerHeartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dec_.MergeFrom(from._impl_.dec_);
  if (!from._internal_scheduler_id().empty()) {
    _this->_internal_set_scheduler_id(from._internal_scheduler_id());
  }
  if (!from._internal_scheduler_ip().empty()) {
    _this->_internal_set_scheduler_ip(from._internal_scheduler_ip());
  }
  if (from._internal_scheduler_port() != 0) {
    _this->_internal_set_scheduler_port(from._internal_scheduler_port());
  }
  if (from._internal_timetamp() != 0) {
    _this->_internal_set_timetamp(from._internal_timetamp());
  }
  if (from._internal_is_healthy() != 0) {
    _this->_internal_set_is_healthy(from._internal_is_healthy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SchedulerHeartbeat::CopyFrom(const SchedulerHeartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:taskscheduler.SchedulerHeartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulerHeartbeat::IsInitialized() const {
  return true;
}

void SchedulerHeartbeat::InternalSwap(SchedulerHeartbeat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dec_.InternalSwap(&other->_impl_.dec_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scheduler_id_, lhs_arena,
      &other->_impl_.scheduler_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scheduler_ip_, lhs_arena,
      &other->_impl_.scheduler_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SchedulerHeartbeat, _impl_.is_healthy_)
      + sizeof(SchedulerHeartbeat::_impl_.is_healthy_)
      - PROTOBUF_FIELD_OFFSET(SchedulerHeartbeat, _impl_.scheduler_port_)>(
          reinterpret_cast<char*>(&_impl_.scheduler_port_),
          reinterpret_cast<char*>(&other->_impl_.scheduler_port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SchedulerHeartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_task_2eproto_getter, &descriptor_table_task_2eproto_once,
      file_level_metadata_task_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace taskscheduler
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::taskscheduler::Task_MetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::taskscheduler::Task_MetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taskscheduler::Task_MetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::taskscheduler::Task*
Arena::CreateMaybeMessage< ::taskscheduler::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taskscheduler::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::taskscheduler::TaskResult*
Arena::CreateMaybeMessage< ::taskscheduler::TaskResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taskscheduler::TaskResult >(arena);
}
template<> PROTOBUF_NOINLINE ::taskscheduler::WorkerHeartbeat_DecEntry_DoNotUse*
Arena::CreateMaybeMessage< ::taskscheduler::WorkerHeartbeat_DecEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taskscheduler::WorkerHeartbeat_DecEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::taskscheduler::WorkerHeartbeat*
Arena::CreateMaybeMessage< ::taskscheduler::WorkerHeartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taskscheduler::WorkerHeartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::taskscheduler::SchedulerHeartbeat_DecEntry_DoNotUse*
Arena::CreateMaybeMessage< ::taskscheduler::SchedulerHeartbeat_DecEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taskscheduler::SchedulerHeartbeat_DecEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::taskscheduler::SchedulerHeartbeat*
Arena::CreateMaybeMessage< ::taskscheduler::SchedulerHeartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::taskscheduler::SchedulerHeartbeat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
